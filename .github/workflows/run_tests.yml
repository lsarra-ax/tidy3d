name: "tidy3d-frontend-tests"

on:
  workflow_dispatch:
  push:
    branches: [ develop, latest ]
  pull_request:
    branches:
      - latest
      - develop
      - 'pre/*'

jobs:

  configure:

    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Note we just want the python versions to exist
    # in order for `nox` to create the test-specific-venvs 
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9 - 3.12"

    # Have a poetry installation available
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true
          
    # Create virtual environment for the `nox` testing suite
    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate || .venv\\Scripts\\activate
        python -m pip install --upgrade pip
        pip install -e .[test]

    # Verify installation
    - name: Verify installation
      run: |
        source .venv/bin/activate || .venv\\Scripts\\activate
        pip list
    

  #pre-commit:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #    - name: Set up Python
  #      uses: actions/setup-python@v5
  #      with:
  #        python-version: "3.11"
  #        submodules: 'recursive'
  #    - name: Test pre-commit hooks
  #      run: |
  #        python -m pip install --upgrade pip
  #        pip install pre-commit
  #        pre-commit run # this should be really more agressive

  #build:
  #  name: Test OS ${{ matrix.platform }}
  #  runs-on: ${{ matrix.platform }}
  #  strategy:
  #    matrix:
  #      platform: [ubuntu-latest, windows-latest, macos-latest]
  #  defaults:
  #    run:
  #      shell: bash
  #  env:  # Set environment variables for the whole job
  #    PIP_ONLY_BINARY: gdstk
  #    MPLBACKEND: agg

  #  steps:
  #  - uses: actions/checkout@v4

  #  #----------------------------------------------
  #  #  -----  install & configure poetry  -----
  #  #----------------------------------------------
  #  - name: Install Poetry
  #    uses: snok/install-poetry@v1
  #    with:
  #      version: 1.8.2
  #      virtualenvs-create: true
  #      virtualenvs-in-project: true

  #  - uses: wntrblm/nox@2024.04.15
  #    with:
  #      python-versions: "3.9, 3.10, 3.11, 3.12"
  # 
  #  - name: Install Extra Dependencies
  #    run: |
  #      pip install nox-poetry

  #  - name: Run nox
  #    run: |
  #      nox
  #  
  #      #----------------------------------------------
  #  # install your root project, if required
    #----------------------------------------------
    # - name: Install library
        #  run: |
        #    poetry --version
        #    poetry env use python
        #    poetry env info
        #    poetry run pip install --upgrade pip wheel setuptools
        #    poetry run pip install gdstk --only-binary gdstk
        #    poetry install -E dev

    #----------------------------------------------
    #    add matrix specifics and run test suite
    #----------------------------------------------
      #- name: Run tests
      #  run: |
      #    poetry run ruff format . --check --diff
      #    poetry run ruff check tidy3d --fix --exit-non-zero-on-fix
      #    poetry run pytest -rA tests
      #    poetry run pytest -rA tests/_test_data/_test_datasets_no_vtk.py
